Mmain	main.c	/^int main(int argc, char *argv[])$/
_hero	game.c	/^} _hero;$/
_pow2	freetype_imp.c	/^inline static unsigned int _pow2(unsigned int i)$/
ai_chase	ai.c	/^void ai_chase(object * target, object * chaser, do/
al_stream	stream_sound.h	/^typedef struct al_stream_type * al_stream;$/
al_stream_free_file	stream_sound.c	/^int al_stream_free_file(al_stream als){$/
al_stream_init	stream_sound.c	/^al_stream al_stream_init(void){$/
al_stream_load_file	stream_sound.c	/^int al_stream_load_file(al_stream als, const char /
al_stream_play	stream_sound.c	/^int al_stream_play(al_stream als){$/
al_stream_transition	stream_sound.c	/^int al_stream_transition(al_stream als, double sec/
al_stream_type	stream_sound.c	/^} al_stream_type;$/
al_stream_update	stream_sound.c	/^int al_stream_update(al_stream als){$/
bounce	physics.c	/^int bounce(object * obj, int x, int y){$/
chain_cut	game.c	/^void chain_cut(game gm, int index){$/
chain_ready_zero	game.c	/^void chain_ready_zero(game gm){$/
chain_remove	game.c	/^void chain_remove(game gm, int index){$/
ck_create_tables	data_interface.c	/^int ck_create_tables(data_record db){$/
cleanup	main.c	/^void cleanup (void) {$/
collision	physics.c	/^int collision(object *ta, object *tb){$/
collision_test	physics.c	/^int collision_test(object ta, object tb){$/
createSurface	main.c	/^static void createSurface (int fullscreen)$/
data_record	data_interface.h	/^typedef struct data_record_type * data_record;$/
data_record_type	data_interface.c	/^} data_record_type;$/
drawGL	main.c	/^static void drawGL ()$/
game	game.h	/^typedef struct gametype *game;$/
game_finish_session	data_interface.c	/^void game_finish_session(data_record db, int death/
game_list	data_interface.c	/^} game_list;$/
game_record_lvl_stats	data_interface.c	/^void game_record_lvl_stats(data_record db, int lvl/
game_start_session	data_interface.c	/^void game_start_session(data_record db){$/
gametype	game.c	/^} gametype;$/
gm_dim	game.c	/^vector2 gm_dim(game gm){$/
gm_free	game.c	/^void gm_free(game gm){$/
gm_free_level	game.c	/^void gm_free_level(game gm){$/
gm_init	game.c	/^game gm_init(char * res_path){$/
gm_init_sounds	game.c	/^void gm_init_sounds(game gm){$/
gm_init_textures	game.c	/^int gm_init_textures(game gm){$/
gm_load_bk	game.c	/^int gm_load_bk(game gm, char * file){$/
gm_load_level	game.c	/^int gm_load_level(game gm, char * lvl){$/
gm_message_render	game.c	/^void gm_message_render(game gm, int width, int hei/
gm_mouse	game.c	/^void gm_mouse(game gm, int x, int y){$/
gm_nkey_down	game.c	/^void gm_nkey_down(game gm, unsigned char key){$/
gm_nkey_up	game.c	/^void gm_nkey_up(game gm, unsigned char key){$/
gm_progress	game.c	/^int gm_progress(game gm){$/
gm_render	game.c	/^void gm_render(game gm){$/
gm_reshape	game.c	/^void gm_reshape(game gm, int width, int height){$/
gm_set_view	game.c	/^void gm_set_view(int width, int height, game gm){$/
gm_skey_down	game.c	/^void gm_skey_down(game gm, int key){$/
gm_skey_up	game.c	/^void gm_skey_up(game gm, int key){$/
gm_stats	game.c	/^void gm_stats(game gm, double * time, int * people/
gm_update	game.c	/^void gm_update(game gm, int width, int height, dou/
gm_update_sound	game.c	/^void gm_update_sound(game gm){$/
gm_update_view	game.c	/^void gm_update_view(game gm){$/
init	main.c	/^void init(int argc, char** argv){$/
initAttributes	main.c	/^static void initAttributes ()$/
init_data_record	data_interface.c	/^data_record init_data_record(char * file_name, cha/
level_list	data_interface.c	/^} level_list;$/
line	physics.h	/^} line;$/
line_collision	physics.c	/^int line_collision(vector2 pt1, vector2 pt2, objec/
line_line	physics.c	/^int line_line(vector2 p, vector2 bp, vector2 q, ve/
load_buffer	stream_sound.c	/^int load_buffer(al_stream als, ALuint buf){$/
load_level_file	game.c	/^int load_level_file(game gm, char * file){$/
load_png	load_png.c	/^int load_png(char *name, int *outWidth, int *outHe/
load_texture	load_png.c	/^int load_texture(char * file, GLuint * texture){$/
mainLoop	main.c	/^static void mainLoop ()$/
make_glyph_texture	freetype_imp.c	/^static int make_glyph_texture(rat_glyph_font *gf,r/
numbers	main.c	/^void numbers(void)$/
object	physics.h	/^} object;$/
point_collision	physics.c	/^int point_collision(vector2 pt, object *c){$/
ppl	game.c	/^} ppl;$/
prepare_game_list	data_interface.c	/^void prepare_game_list(data_record db){$/
prepare_level_scores	data_interface.c	/^void prepare_level_scores(data_record db){$/
prepare_user_list	data_interface.c	/^void prepare_user_list(data_record db){$/
pressKey	main.c	/^void pressKey(int key) {$/
printAttributes	main.c	/^static void printAttributes ()$/
processNormalKeys	main.c	/^void processNormalKeys(unsigned char key) {$/
r_collision	physics.c	/^int r_collision(object *ta, object *tb){$/
rat_font	freetype_imp.h	/^} rat_font;$/
rat_font_free	freetype_imp.c	/^void rat_font_free(rat_font * font){$/
rat_font_glyph_length	freetype_imp.c	/^float rat_font_glyph_length(rat_font *font,char ch/
rat_font_height	freetype_imp.c	/^float rat_font_height(rat_font *font)$/
rat_font_render_text	freetype_imp.c	/^void rat_font_render_text(rat_font *font,float x,f/
rat_font_render_text_notform	freetype_imp.c	/^void rat_font_render_text_notform(rat_font *font,c/
rat_font_text_length	freetype_imp.c	/^float rat_font_text_length(rat_font *font,char *te/
rat_get_text_color	freetype_imp.c	/^void rat_get_text_color(rat_font * font, float *rg/
rat_glyph_font	freetype_imp.h	/^} rat_glyph_font;$/
rat_glyph_font_destroy	freetype_imp.c	/^static void rat_glyph_font_destroy(rat_glyph_font /
rat_glyph_font_load	freetype_imp.c	/^static rat_glyph_font *rat_glyph_font_load(FT_Libr/
rat_init	freetype_imp.c	/^rat_font * rat_init()$/
rat_load_font	freetype_imp.c	/^void rat_load_font(rat_font * font, char * file, i/
rat_set_text_color	freetype_imp.c	/^void rat_set_text_color(rat_font * font, float *rg/
rat_stop_font_system	freetype_imp.c	/^static void rat_stop_font_system(rat_font * font)$/
rat_texture_font	freetype_imp.h	/^} rat_texture_font;$/
rat_texture_font_destroy	freetype_imp.c	/^static void rat_texture_font_destroy(rat_texture_f/
rat_texture_font_from_glyph_font	freetype_imp.c	/^static rat_texture_font *rat_texture_font_from_gly/
releaseKey	main.c	/^void releaseKey(int key) {$/
releaseNormalKeys	main.c	/^void releaseNormalKeys(unsigned char key) {$/
render_game_list	data_interface.c	/^void render_game_list(data_record db, int width, i/
render_level_scores	data_interface.c	/^void render_level_scores(data_record db, int width/
render_user_list	data_interface.c	/^void render_user_list(data_record db, int width, i/
s_add_snd	sound_list.c	/^void s_add_snd(s_list sl, ALuint buf, object * o, /
s_free	sound_list.c	/^void s_free(s_list sl){$/
s_init	sound_list.c	/^s_list s_init(void){$/
s_list	sound_list.h	/^typedef struct s_type * s_list;$/
s_node	sound_list.c	/^} s_node;$/
s_type	sound_list.c	/^} s_type;$/
s_update	sound_list.c	/^void s_update(s_list sl){$/
safe_zone_test	physics.c	/^int safe_zone_test(object ta, object tb){$/
save_lvl_stats	main.c	/^void *save_lvl_stats(void *threadarg)$/
sf_add_snd	sound_list_follow.c	/^void sf_add_snd(sf_list sl, object * o){$/
sf_free	sound_list_follow.c	/^void sf_free(sf_list sl){$/
sf_init	sound_list_follow.c	/^sf_list sf_init(ALuint buffer){$/
sf_node	sound_list_follow.c	/^} sf_node;$/
sf_type	sound_list_follow.c	/^} sf_type;$/
sf_update	sound_list_follow.c	/^void sf_update(sf_list sl){$/
showhud	main.c	/^void showhud(void){$/
snd_load_file	load_sound.c	/^int snd_load_file(char const * file, ALuint buffer/
stats_list_prep	data_interface.c	/^void stats_list_prep(data_record db){$/
stats_render	data_interface.c	/^int stats_render(data_record db, int width, int he/
stink_add	game.c	/^void stink_add(game gm, int id){$/
stink_render	game.c	/^void stink_render(game gm){$/
stink_step	game.c	/^void stink_step(game gm, double dt){$/
stink_struct	game.c	/^} stink_struct;$/
thread_dat	main.c	/^struct thread_data{$/
user_list	data_interface.c	/^} user_list;$/
user_nkey_down	data_interface.c	/^int user_nkey_down(data_record db, unsigned char k/
user_skey_down	data_interface.c	/^void user_skey_down(data_record db, int key){$/
v2Add	vector2.c	/^vector2 v2Add(vector2 a, vector2 b) {$/
v2Arg	vector2.c	/^float v2Arg(vector2 v) {$/
v2Cross	vector2.c	/^float v2Cross(vector2 a, vector2 b) {$/
v2Dot	vector2.c	/^float v2Dot(vector2 a, vector2 b) {$/
v2Len	vector2.c	/^float v2Len(vector2 v) {$/
v2Neg	vector2.c	/^vector2 v2Neg(vector2 a) {$/
v2Polar	vector2.c	/^vector2 v2Polar(float len, float angle) {$/
v2Rotate	vector2.c	/^vector2 v2Rotate(float ang, vector2 a){$/
v2SPow	vector2.c	/^float v2SPow(vector2 v) {$/
v2Sub	vector2.c	/^vector2 v2Sub(vector2 a, vector2 b) {$/
v2Unit	vector2.c	/^vector2 v2Unit(vector2 v) {$/
v2sMul	vector2.c	/^vector2 v2sMul(float f, vector2 v) {$/
vector2	vector2.h	/^} vector2;$/
zb_chase_hero	game.c	/^void zb_chase_hero(game gm){$/
